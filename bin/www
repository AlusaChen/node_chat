#!/usr/bin/env node

var debug 		= require('debug')('chat');

var app 		= require('../app');
/*
var server		= require('http').Server(app);
var io 			= require('socket.io')(server);
io.on('connection', function(socket){
	//############
});
server.listen(3000);
*/

app.set('port', process.env.PORT || 3000);
var server = app.listen(app.get('port'), function() {
  debug('server listening on port ' + server.address().port);
});


var io 			= require('socket.io')(server);

var users 		= [];
var count		= 0;

io.on('connection', function(socket){
	console.log('connection!!!!!!!');

	var info	= {nickname : '', room : []}

	socket.on('room', function(room){
		if(info.room.indexOf(room) < 0)
		{
			info.room.push(room);
			socket.join(room);
		}
		else
		{
			info.type    = 'error';
			info.message = 'you are already in this room'
			socket.send(info);
		}
	});

	socket.on('leaveroom', function(room){
		var i = info.room.indexOf(room);
		if(i >= 0)
		{
			info.room.splice(i, 1);
			socket.leave(room);
		}
		else
		{
			info.type    = 'error';
			info.message = 'you are not in this room'
			socket.send(info);
		}
	});

	socket.on('message', function(data){
		if(!info.nickname)
		{
			if(users[data])
			{
				info.type 	 = 'error';
				info.message = 'the name has been used';
				socket.send(info);
				return;
			}
			count ++ ;
			users[data]	  = count;
			info.nickname = data;
			info.type	  = 'welcome';
			socket.send(info);
			info.type 	  = 'login';
		}
		else
		{
			info.type     = 'message';
			info.message  = data;
		}

		broadcast(info);
		//console.log(socket.rooms);
	});

	socket.on('disconnect', function(){
		if(info.nickname)
		{
			info.type = 'logout';
			broadcast(info);
			var i = users.indexOf(info.nickname);
			if(i >= 0 ) users.splice(i, 1);
		}
	});

	function broadcast(data)
	{
		var rooms = socket.rooms;
		for(var i in rooms)
		{
			if(i == 0) continue;
			socket.broadcast.to(rooms[i]).send(data);
			//socket.broadcast.in(rooms[i]).send(msg); //include the sender
		}
	}
	
});

/*
setInterval(function(){
	io.in('room1').emit('message', 'what is going on?');
	io.in('room2').emit('message', 'anyone here?')	
},2000);
*/
//io.to(rooms[i]).emit('message', msg);
//io.in(rooms[i]).emit('message', msg); //include the sender

//server.listen(3000);


